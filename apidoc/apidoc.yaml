openapi: 3.0.0
info:
  title: Customer & Product Management API
  version: 1.0.0
  description: RESTful API for managing customers, products, and related entities
servers:
  - url: http://localhost:8080/api
    description: Development server

components:
  schemas:
    Customer:
      type: object
      required: [name, email]
      properties:
        customerId:
          type: integer
          format: int32
          example: 12345
        name:
          type: string
          maxLength: 100
          example: "John Doe"
        email:
          type: string
          maxLength: 100
          example: "john@example.com"
        phone:
          type: string
          maxLength: 20
          example: "+1234567890"
        address:
          type: string
          example: "123 Main St, City"
        gender:
          type: string
          example: "Male"
        title:
          type: string
          example: "Mr./Ms."
    
    Product:
      type: object
      required: [productName, category, price]
      properties:
        productId:
          type: integer
          format: int32
          example: 1001
        productName:
          type: string
          maxLength: 100
          example: "Smartphone X"
        category:
          type: string
          maxLength: 50
          example: "Electronics"
        subCategory:
          type: string
          maxLength: 50
          example: "Mobile Phones"
        price:
          type: number
          format: float
          example: 699.99
        imageUrl:
          type: string
          example: "https://example.com/images/smartphone.jpg"
        description:
          type: string
          example: "Latest flagship smartphone with 5G"

    Order:
      type: object
      required: [customerId, orderDate, status]
      properties:
        orderId:
          type: integer
          format: int32
          example: 9991
        customerId:
          type: integer
          format: int32
          example: 12345
        orderDate:
          type: string
          format: date
          example: "2025-06-03"
        totalAmount:
          type: number
          format: float
          example: 699.99
        productId:
          type: integer
          format: int32
          example: 1001
        status:
          type: string
          maxLength: 50
          example: "Processing"

paths:
  /customers:
    get:
      summary: Get all customers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    post:
      summary: Create a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Customer created successfully
        '400':
          description: Invalid input data

  /customers/{id}:
    get:
      summary: Get customer by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
    
    put:
      summary: Update customer by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Customer updated successfully
        '400':
          description: Invalid input data
        '404':
          description: Customer not found

    delete:
      summary: Delete customer by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Customer deleted successfully
        '404':
          description: Customer not found

  /products:
    get:
      summary: Get all products
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
        '400':
          description: Invalid input data

  /products/{id}:
    get:
      summary: Get product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

    put:
      summary: Update product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
        '400':
          description: Invalid input data
        '404':
          description: Product not found

    delete:
      summary: Delete product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found

  /orders:
    get:
      summary: Get all orders
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
        '400':
          description: Invalid input data

  /orders/{id}:
    get:
      summary: Get order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

    put:
      summary: Update order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated successfully
        '400':
          description: Invalid input data
        '404':
          description: Order not found

    delete:
      summary: Delete order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Order deleted successfully
        '404':
          description: Order not found

  /customers/{customerId}/orders:
    get:
      summary: Get all orders for a specific customer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: Customer not found

    post:
      summary: Create a new order for a specific customer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
        '400':
          description: Invalid input data
        '404':
          description: Customer not found
