openapi: 3.0.0
info:
  title: OmniScience Backend API
  version: 1.0.0
  description: RESTful API for managing customers, products, and related entities
servers:
  - url: http://8.140.56.123/api
    description: Development server

components:
  schemas:
    Customer:
      type: object
      required: [name, email]
      properties:
        customerId:
          type: integer
          format: int32
          example: 12345
        name:
          type: string
          maxLength: 100
          example: "John Doe"
        email:
          type: string
          maxLength: 100
          example: "john@example.com"
        phone:
          type: string
          maxLength: 20
          example: "+1234567890"
        address:
          type: string
          example: "123 Main St, City"
        gender:
          type: string
          example: "Male"
        title:
          type: string
          example: "Mr./Ms."
    
    Product:
      type: object
      required: [productName, category, price]
      properties:
        productId:
          type: integer
          format: int32
          example: 1001
        productName:
          type: string
          maxLength: 100
          example: "Smartphone X"
        gender:
          type: string
          enum: [M, F]
          example: "M"
        category:
          type: string
          maxLength: 50
          example: "Electronics"
        subCategory:
          type: string
          maxLength: 50
          example: "Mobile Phones"
        price:
          type: number
          format: float
          example: 699.99
        imageUrl:
          type: string
          example: "https://example.com/images/smartphone.jpg"
        description:
          type: string
          example: "Latest flagship smartphone with 5G"

    Order:
      type: object
      required: [customerId, orderDate, status]
      properties:
        orderId:
          type: integer
          format: int32
          example: 9991
        customerId:
          type: integer
          format: int32
          example: 12345
        orderDate:
          type: string
          format: date
          example: "2025-06-03"
        totalAmount:
          type: number
          format: float
          example: 699.99
        productId:
          type: integer
          format: int32
          example: 1001
        status:
          type: string
          maxLength: 50
          example: "Processing"

    CustomerTagDefinition:
      type: object
      required: [tagId, tagName, description]
      properties:
        tagId:
          type: integer
          format: int32
          example: 12345
        tagName:
          type: string
          maxLength: 50
          example: "Smartphone"
        description:
          type: string
          maxLength: 100
          example: "Smartphone with 5G"

paths:
  /customers:
    get:
      summary: Get customers filtered by phone number
      parameters:
        - name: phone
          in: query
          required: false
          description: Filter customers by phone number
          schema:
            type: string
            maxLength: 20
            example: "+1234567890"
      responses:
        '200':
          description: List of matching customers (may be empty)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'

  /customers/order:
    get:
      summary: Get customer order by Customer ID
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: Customer not found

  /customers/chats:
    get:
      summary: Get customer chats by Customer ID
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: Customer not found
    
  /products:
    get:
      summary: Get all products
      parameters:
        - name: gender
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /tags:
    get:
      summary: Get all tags
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerTagDefinition'